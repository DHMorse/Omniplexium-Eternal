import os
import discord
from discord.ext import commands

from const import ROOT_DIR

@commands.command()
async def vanity(ctx):
    """Get the total number of lines in the project files."""
    total_lines = count_python_lines(ROOT_DIR)
    total_lines = "{:,}".format(total_lines)
    total_files = get_total_files(ROOT_DIR)
    total_files = "{:,}".format(total_files)
    total_commands = get_total_commands(ROOT_DIR)
    total_commands = "{:,}".format(total_commands)
    embed = discord.Embed(
    title="📊 Bot Statistics",
    description="Here’s a breakdown of the bot’s code and commands:",
    color=0x5865F2  # Use a more vibrant color
    )

    embed.add_field(
        name="🔢 Total Lines of Code",
        value=f"```yaml\n{total_lines}\n```",
        inline=False
    )
    embed.add_field(
        name="🛠️ Total Commands",
        value=f"```yaml\n{total_commands}\n```",
        inline=False
    )
    embed.add_field(
        name="📁 Total Files",
        value=f"```yaml\n{total_files}\n```",
        inline=False
    )

    embed.set_footer(
        text="Generated by Eli Bot, Powered by 404",
        icon_url=ctx.bot.user.avatar.url  # Replace with your bot's avatar URL
    )
    embed.set_thumbnail(
        url=""  # Replace with your bot's logo URL
    )

    await ctx.send(embed=embed)


def count_python_lines(directory):
    total_lines = 0

    # Walk through all files and subdirectories
    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith('.py'):
                file_path = os.path.join(root, file)
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        lines = f.readlines()
                        total_lines += len(lines)
                except Exception as e:
                    print(f"Error reading {file_path}: {e}")

    return total_lines

def get_total_files(directory: str) -> int:
    total_files = 0
    
    # Walk through all directories and subdirectories
    for subdir, _, files in os.walk(directory):
        # skip over directors that start with .
        if subdir.startswith('.'):
            continue
        # Skip __pycache__ and .git directories
        if '__pycache__' not in subdir and '.git' not in subdir:
            total_files += len([file for file in files if not file.endswith('.pyc')])

    return total_files

def get_total_commands(directory):
    total_commands = 0

    # Walk through all files and subdirectories
    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith('.py'):
                total_commands += 1

    return total_commands